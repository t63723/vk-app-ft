{"version":3,"sources":["utils.js","utilsButton.js","panels/Home.js","App.js","index.js"],"names":["dispatch","id","method","a","result","url","options","body","JSON","stringify","headers","mode","fetch","then","response","json","data","catch","error","console","log","getTopic","userId","getVKGroup","getButtonTitle","strTitle","reqOptions","Accept","textAlign","buttonMain","buttonSecond","Home","fetchedUser","go","buttonTitle","vkTopic","vkGroup","style","href","target","App","useState","activePanel","setActivePanel","setUser","size","popout","setPopout","setVkTopic","setVKGroup","setButtonTitle","useEffect","bridge","send","user","t","linkVKGroup","strButtonTitle","subscribe","detail","type","schemeAttribute","document","createAttribute","value","scheme","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7270f84b.chunk.js","sourcesContent":["const dispatch = async (id, method) => {\n\n    let result = '';\n\n    const url = `https://pht.life/api/v1/member/${method}/`;\n\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify({'userId': id}),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n        mode: 'cors',\n    }\n\n    await fetch(url, options)\n        .then((response) => response.json())\n        .then((data) => result = data.result)\n        .catch((error) => console.log(error));\n\n    return result\n}\n\nexport const getTopic = async (userId) => {\n    return dispatch(userId, 'topic');\n}\n\nexport const getVKGroup = async (userId) => {\n    return dispatch(userId, 'group');\n}\n","const getButtonTitle = async (userId) => {\n\n    let strTitle = \"\";\n\n    const url = `https://pht.life/api/v1/member/util/button/`;\n\n    const reqOptions = {\n        \"userId\": userId\n    }\n\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(reqOptions),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n        mode: 'cors',\n    }\n\n    await fetch(url, options)\n        .then((response) => response.json())\n        .then((data) => {\n            strTitle = data.result;\n        })\n        .catch((error) => console.log(error));\n\n    return strTitle;\n}\n\nexport default getButtonTitle;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport {Link} from '@vkontakte/vkui';\n\n\nconst textAlign = {\n    \"textAlign\": \"center\",\n    \"paddingTop\": \"40px\"\n};\n\nconst buttonMain = {\n    \"backgroundColor\": \"#2B50ED\",\n    \"color\": \"white\",\n    \"padding\": \"1em 1.5em\",\n    \"textDecoration\": \"none\",\n    \"textTransform\": \"uppercase\",\n    \"borderRadius\": \"14px\"\n}\n\nconst buttonSecond = {\n    \"backgroundColor\": \"#E0E8F6\",\n    \"color\": \"#2B50ED\",\n    \"padding\": \"1em 1.5em\",\n    \"textDecoration\": \"none\",\n    \"textTransform\": \"uppercase\",\n    \"borderRadius\": \"14px\"\n}\n\nconst Home = ({id, go, fetchedUser, buttonTitle, vkTopic, vkGroup}) => (\n    <Panel id={id}>\n        <PanelHeader>Physical Transformation</PanelHeader>\n        <Div style={textAlign}>\n            <Group>\n                <Cell>\n                    <Div>\n                        <Div>\n                            {fetchedUser && buttonTitle &&\n                            <Link href=\"https://pht.life/\" target=\"_blank\" style={buttonMain}>{buttonTitle}</Link>}\n                        </Div>\n                    </Div>\n                </Cell>\n                {\n                    fetchedUser &&\n                    vkGroup &&\n                    <Cell>\n                        <Div>\n                            <Link href={`${vkGroup}`} target=\"_blank\" style={buttonSecond}>\n                                Твоя группа\n                            </Link>\n                        </Div>\n                    </Cell>\n                }\n                <Cell>\n                    <Div>\n                        <Div>\n                            {\n                                fetchedUser &&\n                                vkTopic &&\n                                <Link href={`${vkTopic}?offset=last`} target=\"_blank\" style={buttonSecond}>\n                                    Твоя тема\n                                </Link>\n                            }\n                        </Div>\n                    </Div>\n                </Cell>\n            </Group>\n        </Div>\n    </Panel>\n);\n\nHome.propTypes = {\n    id: PropTypes.string.isRequired,\n    go: PropTypes.func.isRequired,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        id: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    }),\n};\n\nexport default Home;\n","import React, {useEffect, useState} from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport {getTopic, getVKGroup} from './utils';\nimport getButtonTitle from \"./utilsButton.js\";\n\nimport Home from './panels/Home';\n\nconst App = () => {\n    const [activePanel, setActivePanel] = useState('home');\n    const [fetchedUser, setUser] = useState(null);\n    const [popout, setPopout] = useState(<ScreenSpinner size='large'/>);\n\n    const [vkTopic, setVkTopic] = useState(null);\n    const [vkGroup, setVKGroup] = useState(null);\n    const [buttonTitle, setButtonTitle] = useState(null);\n\n    useEffect(() => {\n        bridge.subscribe(({detail: {type, data}}) => {\n            if (type === 'VKWebAppUpdateConfig') {\n                const schemeAttribute = document.createAttribute('scheme');\n                schemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n                document.body.attributes.setNamedItem(schemeAttribute);\n            }\n        });\n\n        async function fetchData() {\n            const user = await bridge.send('VKWebAppGetUserInfo');\n            setUser(user);\n            setPopout(null);\n\n            const t = await getTopic(user.id);\n            setVkTopic(t);\n\n            const linkVKGroup = await getVKGroup(user.id);\n            setVKGroup(linkVKGroup);\n\n            const strButtonTitle = await getButtonTitle(user.id)\n            setButtonTitle(strButtonTitle);\n\n        }\n\n        fetchData();\n    }, []);\n\n    const go = e => {\n        setActivePanel(e.currentTarget.dataset.to);\n    };\n\n    return (\n        <View activePanel={activePanel} popout={popout}>\n            <Home\n                id='home'\n                go={go}\n                fetchedUser={fetchedUser}\n                vkGroup={vkGroup}\n                vkTopic={vkTopic}\n                buttonTitle={buttonTitle}\n            />\n        </View>\n    );\n}\n\nexport default App;","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}