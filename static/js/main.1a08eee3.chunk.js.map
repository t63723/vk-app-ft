{"version":3,"sources":["utils.js","utilsButton.js","panels/Home.js","App.js","index.js"],"names":["getTopic","userId","a","reqOptions","options","method","body","JSON","stringify","headers","Accept","mode","fetch","then","response","json","data","vkTopic","result","catch","error","console","log","getButtonTitle","strTitle","textAlign","buttonMain","buttonSecond","Home","id","fetchedUser","go","buttonTitle","style","href","target","App","useState","activePanel","setActivePanel","setUser","size","popout","setPopout","setVkTopic","setButtonTitle","useEffect","bridge","send","user","t","strButtonTitle","subscribe","detail","type","schemeAttribute","document","createAttribute","value","scheme","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1a08eee3.chunk.js","sourcesContent":["\nconst getTopic = async (userId) => {\n\n    let vkTopic;\n\n    const url = `https://physical-transformation.online/api/v1/member/topic/`;\n\n    const reqOptions = {\n        \"userId\": userId\n    }\n\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(reqOptions),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n        mode: 'cors',\n    }\n\n    await fetch(url, options)\n        .then((response) => response.json())\n        .then((data) => {\n            vkTopic = data.result === \"error\" ? null : data.result;\n\n        })\n        .catch((error) => console.log(error));\n    \n    return vkTopic;\n}\n\nexport default getTopic;","const getButtonTitle = async (userId) => {\n\n    let strTitle = \"\";\n\n    const url = `https://physical-transformation.online/api/v1/member/util/button/`;\n\n    const reqOptions = {\n        \"userId\": userId\n    }\n\n    const options = {\n        method: \"POST\",\n        body: JSON.stringify(reqOptions),\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n            \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n        mode: 'cors',\n    }\n\n    await fetch(url, options)\n        .then((response) => response.json())\n        .then((data) => {\n            strTitle = data.result;\n        })\n        .catch((error) => console.log(error));\n\n    return strTitle;\n}\n\nexport default getButtonTitle;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport { Link } from '@vkontakte/vkui';\n\n\nconst textAlign = {\n\t\"textAlign\": \"center\",\n\t\"paddingTop\": \"40px\"\n};\n\nconst buttonMain = {\n\t\"backgroundColor\": \"#2B50ED\",\n\t\"color\": \"white\",\n\t\"padding\": \"1em 1.5em\",\n\t\"textDecoration\": \"none\",\n\t\"textTransform\": \"uppercase\",\n\t\"borderRadius\": \"14px\"\n}\n\nconst buttonSecond = {\n\t\"backgroundColor\": \"#E0E8F6\",\n\t\"color\": \"#2B50ED\",\n\t\"padding\": \"1em 1.5em\",\n\t\"textDecoration\": \"none\",\n\t\"textTransform\": \"uppercase\",\n\t\"borderRadius\": \"14px\"\n}\n\nconst Home = ({ id, go, fetchedUser, buttonTitle, vkTopic }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader>Physical Transformation</PanelHeader>\n\t\t<Div style={textAlign}>\n\t\t\t<Group>\n\t\t\t\t<Cell>\n\t\t\t\t\t<Div>\n\t\t\t\t\t\t<Div>\n\t\t\t\t\t\t\t{fetchedUser && buttonTitle && <Link href=\"https://physical-transformation.online/\" target=\"_blank\" style={buttonMain}>{buttonTitle}</Link>}\n\t\t\t\t\t\t</Div>\n\t\t\t\t\t</Div>\n\t\t\t\t</Cell>\n\t\t\t\t<Cell>\n\t\t\t\t\t<Div>\n\t\t\t\t\t\t<Div>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfetchedUser &&\n\t\t\t\t\t\t\t\tvkTopic &&\n\t\t\t\t\t\t\t\t<Link href={`${vkTopic}?offset=last`} target=\"_blank\" style={buttonSecond}>\n\t\t\t\t\t\t\t\t\tТвоя тема\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Div>\n\t\t\t\t\t</Div>\n\t\t\t\t</Cell>\n\t\t\t</Group>\n\t\t</Div>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tid: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nexport default Home;\n","import React, {useState, useEffect} from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport getTopic from './utils.js';\nimport getButtonTitle from \"./utilsButton.js\";\n\nimport Home from './panels/Home';\n\nconst App = () => {\n    const [activePanel, setActivePanel] = useState('home');\n    const [fetchedUser, setUser] = useState(null);\n    const [popout, setPopout] = useState(<ScreenSpinner size='large'/>);\n\n    const [vkTopic, setVkTopic] = useState(null);\n    const [buttonTitle, setButtonTitle] = useState(null);\n\n    useEffect(() => {\n        bridge.subscribe(({detail: {type, data}}) => {\n            if (type === 'VKWebAppUpdateConfig') {\n                const schemeAttribute = document.createAttribute('scheme');\n                schemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n                document.body.attributes.setNamedItem(schemeAttribute);\n            }\n        });\n\n        async function fetchData() {\n            const user = await bridge.send('VKWebAppGetUserInfo');\n            setUser(user);\n            setPopout(null);\n\n            const t = await getTopic(user.id);\n            setVkTopic(t);\n\n            const strButtonTitle = await getButtonTitle(user.id)\n            setButtonTitle(strButtonTitle);\n\n        }\n\n        fetchData();\n    }, []);\n\n    const go = e => {\n        setActivePanel(e.currentTarget.dataset.to);\n    };\n\n    return (\n        <View activePanel={activePanel} popout={popout}>\n            <Home id='home' go={go} fetchedUser={fetchedUser} buttonTitle={buttonTitle} vkTopic={vkTopic}/>\n        </View>\n    );\n}\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}