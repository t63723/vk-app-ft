{"version":3,"sources":["panels/Home.js","App.js","index.js"],"names":["Home","id","vkTopic","go","fetchedUser","href","target","App","useState","activePanel","setActivePanel","setUser","size","popout","setPopout","useEffect","a","bridge","send","user","userId","reqOptions","options","method","body","JSON","stringify","headers","Accept","mode","fetch","then","response","json","data","result","catch","error","console","log","subscribe","detail","type","schemeAttribute","document","createAttribute","value","scheme","attributes","setNamedItem","fetchData","e","currentTarget","dataset","to","ReactDOM","render","getElementById"],"mappings":"2nBAmCeA,EAxBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAqBC,GAAxB,EAAOC,GAAP,EAAWC,YAAX,EAAwBF,SAAxB,OACZ,kBAAC,IAAD,CAAOD,GAAIA,GACV,kBAAC,IAAD,gCACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAMI,KAAK,0CAA0CC,OAAO,UAA5D,uEACEJ,KCmDUK,EA1DH,WAAO,IAAD,EACqBC,mBAAS,QAD9B,mBACVC,EADU,KACGC,EADH,OAEcF,mBAAS,MAFvB,mBAEVJ,EAFU,KAEGO,EAFH,OAGWH,mBAAS,kBAAC,IAAD,CAAeI,KAAK,WAHxC,mBAGVC,EAHU,KAGFC,EAHE,KAKXZ,EAAU,GAEhBa,qBAAU,WAAM,4CAQf,kCAAAC,EAAA,sEACoBC,IAAOC,KAAK,uBADhC,OACOC,EADP,OAECR,EAAQQ,GACRL,EAAU,MAEJM,EAASD,EAAKlB,GALrB,8DAQOoB,EAAa,CAClB,OAAUD,GAGLE,EAAU,CACfC,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAS,CACR,eAAgB,mBAChBC,OAAQ,mBACR,mBAAoB,kBAErBC,KAAM,QAGPC,MAvBD,8DAuBYR,GACTS,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAiB,uBAAPhC,EAAUgC,EAAKC,UAC9BC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MA1BhC,6CARe,sBACfpB,IAAOuB,WAAU,YAAiC,IAAD,IAA7BC,OAAUC,EAAmB,EAAnBA,KAAMR,EAAa,EAAbA,KACnC,GAAa,yBAATQ,EAAiC,CACpC,IAAMC,EAAkBC,SAASC,gBAAgB,UACjDF,EAAgBG,MAAQZ,EAAKa,OAASb,EAAKa,OAAS,eACpDH,SAASpB,KAAKwB,WAAWC,aAAaN,OALzB,mCAqCfO,KACE,IAMH,OACC,kBAAC,IAAD,CAAMzC,YAAaA,EAAaI,OAAQA,GACvC,kBAAC,EAAD,CAAMZ,GAAG,OAAOG,YAAaA,EAAaD,GANjC,SAAAgD,GACVzC,EAAeyC,EAAEC,cAAcC,QAAQC,KAKYpD,QAASA,MCtD9De,IAAOC,KAAK,gBAEZqC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASa,eAAe,W","file":"static/js/main.f6a498c4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\nimport { Link } from '@vkontakte/vkui';\n\nconst Home = ({ id, go, fetchedUser, vkTopic }) => (\n\t<Panel id={id}>\n\t\t<PanelHeader>Physical Transformation</PanelHeader>\n\t\t<Div>\n\t\t\t<Link href=\"https://physical-transformation.online/\" target=\"_blank\">Открыть сайт</Link>\n\t\t\t{ vkTopic }\n\t\t</Div>\n\t</Panel>\n);\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tid: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\n\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home');\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n\tconst vkTopic = \"\";\n\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data } }) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tsetPopout(null);\n\n\t\t\tconst userId = user.id;\n\t\t\tconst url = `https://physical-transformation.online/api/v1/member/topic/`;\n\n\t\t\tconst reqOptions = {\n\t\t\t\t\"userId\": userId\n\t\t\t}\n\n\t\t\tconst options = {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: JSON.stringify(reqOptions),\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\t\"X-Requested-With\": \"XMLHttpRequest\",\n\t\t\t\t},\n\t\t\t\tmode: 'cors',\n\t\t\t}\n\n\t\t\tfetch(url, options)\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((data) => vkTopic = data.result)\n\t\t\t\t.catch((error) => console.log(error));\n\n\t\t}\n\t\tfetchData();\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\treturn (\n\t\t<View activePanel={activePanel} popout={popout}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} vkTopic={vkTopic} />\n\t\t</View>\n\t);\n}\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}